#include "controller_ae483.h"
#include "stabilizer_types.h"
#include "power_distribution.h"
#include "log.h"
#include "param.h"
#include "num.h"
#include "math3d.h"


// Sensor measurements
// - tof (from the z ranger on the flow deck)
static uint16_t tof_count = 0;
static float tof_distance = 0.0f;
// - flow (from the optical flow sensor on the flow deck)
static uint16_t flow_count = 0;
static float flow_dpixelx = 0.0f;
static float flow_dpixely = 0.0f;

// Parameters
static bool use_observer = false;
static bool reset_observer = true;

// State
static float p_x = 0.0f;
static float p_y = 0.0f;
static float p_z = 0.0f;
static float psi = 0.0f;
static float theta = 0.0f;
static float phi = 0.0f;
static float v_x = 0.0f;
static float v_y = 0.0f;
static float v_z = 0.0f;
static float w_x = 0.0f;
static float w_y = 0.0f;
static float w_z = 0.0f;

// Setpoint
static float p_x_des = 0.0f;
static float p_y_des = 0.0f;
static float p_z_des = 0.0f;

// Input
static float tau_x = 0.0f;
static float tau_y = 0.0f;
static float tau_z = 0.0f;
static float f_z = 0.0f;

// Motor power command
static uint16_t m_1 = 0;
static uint16_t m_2 = 0;
static uint16_t m_3 = 0;
static uint16_t m_4 = 0;

// Measurements
static float n_x = 0.0f;
static float n_y = 0.0f;
static float r = 0.0f;
static float a_z = 9.81f;

// New measurments
static float a_x = 0.0f;
static float a_y = 0.0f;
static float v_x_int = 0.0f;
static float v_y_int = 0.0f;
static float p_x_int = 0.0f;
static float p_y_int = 0.0f;

// Constants
static float k_flow = 4.09255568f;
static float g = 9.81f;
static float p_z_eq = 0.5f; // FIXME: replace with your choice of equilibrium height

// Measurement errors
static float n_x_err = 0.0f;
static float n_y_err = 0.0f;
static float r_err = 0.0f;

// For time delay
static float tau_x_cmd = 0.0f;    // tau_x command
static float tau_y_cmd = 0.0f;    // tau_y command
static float w_x_old = 0.0f;      // value of w_x from previous time step
static float w_y_old = 0.0f;      // value of w_y from previous time step
static float J_x = 0.0000202167f;          // FIXME: principal moment of inertia about x_B axis
static float J_y = 0.000023f;          // FIXME: principal moment of inertia about y_B axis
static float dt = 0.002f;         // time step (corresponds to 500 Hz)
static float a_z_0 = 0.0f;

// Safety variables
static int safe_to_set_motors = 1; // Safety variable! False if drone is unsafe.

static float W_X_LOWER = -1.0f;
static float W_X_UPPER = 1.0f;
static float W_Y_LOWER = -1.0f;
static float W_Y_UPPER = 1.0f;
static float W_Z_LOWER = -1.5f;
static float W_Z_UPPER = 1.5f;
static float A_Z_LOWER = 6.0f;
static float A_Z_UPPER = 15.0f;
static float N_X_LOWER = -40.0f;
static float N_X_UPPER = 40.0f;
static float N_Y_LOWER = -40.0f;
static float N_Y_UPPER = 40.0f;
static float R_LOWER = 0.0f;
static float R_UPPER = 1.0f;
static float P_Z_LOWER = 0.0f;
static float P_Z_UPPER = 1.0f;
static float PSI_LOWER = -1.0f;
static float PSI_UPPER = 1.0f;
static float THETA_LOWER = -0.2f;
static float THETA_UPPER = 0.2f;
static float PHI_LOWER = -0.2f;
static float PHI_UPPER = 0.2f;
static float V_X_LOWER = -1.0f;
static float V_X_UPPER = 1.0f;
static float V_Y_LOWER = -1.0f;
static float V_Y_UPPER = 1.0f;
static float V_Z_LOWER = -0.5f;
static float V_Z_UPPER = 0.75f;
static float P_X_BOUND = 1.0f;
static float P_Y_BOUND = 1.0f;
static float a_x_in_W = 0.0f;
static float a_y_in_W = 0.0f;


void check_motor_safety() {
    // Define dynamic bounds for p_x and p_y based on p_x_des and p_y_des
    // const float px_margin = 1.0f; // Tolerance range for p_x around p_x_des
    // const float py_margin = 1.0f; // Tolerance range for p_y around p_y_des
    float p_x_lower_bound = p_x_des - P_X_BOUND;
    float p_x_upper_bound = p_x_des + P_X_BOUND;
    float p_y_lower_bound = p_y_des - P_Y_BOUND;
    float p_y_upper_bound = p_y_des + P_Y_BOUND;

    if (w_x < W_X_LOWER || w_x > W_X_UPPER ||
        w_y < W_Y_LOWER || w_y > W_Y_UPPER ||
        w_z < W_Z_LOWER || w_z > W_Z_UPPER ||
        a_z < A_Z_LOWER || a_z > A_Z_UPPER ||
        n_x < N_X_LOWER || n_x > N_X_UPPER ||
        n_y < N_Y_LOWER || n_y > N_Y_UPPER ||
        r   < R_LOWER || r   > R_UPPER ||
        p_x < p_x_lower_bound || p_x > p_x_upper_bound || // Dynamic bounds check for p_x
        p_y < p_y_lower_bound || p_y > p_y_upper_bound || // Dynamic bounds check for p_y
        p_z < P_Z_LOWER || p_z > P_Z_UPPER ||
        psi < PSI_LOWER || psi > PSI_UPPER ||
        theta < THETA_LOWER || theta > THETA_UPPER ||
        phi < PHI_LOWER || phi > PHI_UPPER ||
        v_x < V_X_LOWER || v_x > V_X_UPPER ||
        v_y < V_Y_LOWER || v_y > V_Y_UPPER ||
        v_z < V_Z_LOWER || v_z > V_Z_UPPER) {
        
        safe_to_set_motors = 0;
    }
}

void ae483UpdateWithTOF(tofMeasurement_t *tof)
{
  tof_distance = tof->distance;
  tof_count++;
}

void ae483UpdateWithFlow(flowMeasurement_t *flow)
{
  flow_dpixelx = flow->dpixelx;
  flow_dpixely = flow->dpixely;
  flow_count++;
}

void ae483UpdateWithDistance(distanceMeasurement_t *meas)
{
  // If you have a loco positioning deck, this function will be called
  // each time a distance measurement is available. You will have to write
  // code to handle these measurements. These data are available:
  //
  //  meas->anchorId  uint8_t   id of anchor with respect to which distance was measured
  //  meas->x         float     x position of this anchor
  //  meas->y         float     y position of this anchor
  //  meas->z         float     z position of this anchor
  //  meas->distance  float     the measured distance
}

void ae483UpdateWithPosition(positionMeasurement_t *meas)
{
  // This function will be called each time you send an external position
  // measurement (x, y, z) from the client, e.g., from a motion capture system.
  // You will have to write code to handle these measurements. These data are
  // available:
  //
  //  meas->x         float     x component of external position measurement
  //  meas->y         float     y component of external position measurement
  //  meas->z         float     z component of external position measurement
}

void ae483UpdateWithPose(poseMeasurement_t *meas)
{
  // This function will be called each time you send an external "pose" measurement
  // (position as x, y, z and orientation as quaternion) from the client, e.g., from
  // a motion capture system. You will have to write code to handle these measurements.
  // These data are available:
  //
  //  meas->x         float     x component of external position measurement
  //  meas->y         float     y component of external position measurement
  //  meas->z         float     z component of external position measurement
  //  meas->quat.x    float     x component of quaternion from external orientation measurement
  //  meas->quat.y    float     y component of quaternion from external orientation measurement
  //  meas->quat.z    float     z component of quaternion from external orientation measurement
  //  meas->quat.w    float     w component of quaternion from external orientation measurement
}

void ae483UpdateWithData(const struct AE483Data* data)
{
  // This function will be called each time AE483-specific data are sent
  // from the client to the drone. You will have to write code to handle
  // these data. For the example AE483Data struct, these data are:
  //
  //  data->x         float
  //  data->y         float
  //  data->z         float
  //
  // Exactly what "x", "y", and "z" mean in this context is up to you.
}


void controllerAE483Init(void)
{
  // Do nothing
}

bool controllerAE483Test(void)
{
  // Do nothing (test is always passed)
  return true;
}

void controllerAE483(control_t *control,
                     const setpoint_t *setpoint,
                     const sensorData_t *sensors,
                     const state_t *state,
                     const stabilizerStep_t stabilizerStep)
{
  // Make sure this function only runs at 500 Hz
  if (!RATE_DO_EXECUTE(ATTITUDE_RATE, stabilizerStep)) {
    return;
  }

   // Desired position
  p_x_des = setpoint->position.x;
  p_y_des = setpoint->position.y;
  p_z_des = setpoint->position.z;

  // Measurements
  w_x = radians(sensors->gyro.x);
  w_y = radians(sensors->gyro.y);
  w_z = radians(sensors->gyro.z);
  a_z = g * sensors->acc.z;
  n_x = flow_dpixelx;
  n_y = flow_dpixely;
  r = tof_distance;

  // New Measurments
  a_x = g * sensors->acc.x;
  a_y = g * sensors->acc.y;

  // Torques by finite difference
  tau_x = J_x * (w_x - w_x_old) / dt;
  tau_y = J_y * (w_y - w_y_old) / dt;
  w_x_old = w_x;
  w_y_old = w_y;

  if (reset_observer) {
  p_x = 0.0f;
  p_y = 0.0f;
  p_z = 0.0f;
  psi = 0.0f;
  theta = 0.0f;
  phi = 0.0f;
  v_x = 0.0f;
  v_y = 0.0f;
  v_z = 0.0f;
  a_z_0 = a_z;

  W_X_LOWER = -1.0f;
  W_X_UPPER = 1.0f;
  W_Y_LOWER = -1.0f;
  W_Y_UPPER = 1.0f;
  W_Z_LOWER = -1.5f;
  W_Z_UPPER = 1.5f;
  A_Z_LOWER = 6.0f;
  A_Z_UPPER = 15.0f;
  N_X_LOWER = -40.0f;
  N_X_UPPER = 40.0f;
  N_Y_LOWER = -40.0f;
  N_Y_UPPER = 40.0f;
  R_LOWER = 0.0f;
  R_UPPER = 1.0f;
  P_Z_LOWER = 0.0f;
  P_Z_UPPER = 1.0f;
  PSI_LOWER = -1.0f;
  PSI_UPPER = 1.0f;
  THETA_LOWER = -0.2f;
  THETA_UPPER = 0.2f;
  PHI_LOWER = -0.2f;
  PHI_UPPER = 0.2f;
  V_X_LOWER = -1.0f;
  V_X_UPPER = 1.0f;
  V_Y_LOWER = -1.0f;
  V_Y_UPPER = 1.0f;
  V_Z_LOWER = -0.5f;
  V_Z_UPPER = 0.75f;
  P_X_BOUND = 1.0f;
  P_Y_BOUND = 1.0f;

  v_x_int = 0.0f;
  v_y_int = 0.0f;
  p_x_int = 0.0f;
  p_y_int = 0.0f;
  a_x_in_W = 0.0f;
  a_y_in_W = 0.0f;

  reset_observer = false;
  }

  // State estimates
  if (use_observer) {
  
    // Compute each element of:
    // 
    //   C x + D u - y
    // 
    // FIXME: your code goes here
    
    n_x_err = -1*k_flow*w_y + k_flow*v_x/p_z_eq - n_x;
    n_y_err = -1*k_flow*w_x + k_flow*v_y/p_z_eq - n_y;
    r_err = p_z-r;

    p_x += dt*v_x;
    p_y += dt*v_y;
    p_z += dt*(v_z - 21.85558662371406f  * r_err);
    psi += dt*w_z;
    theta += dt*(w_y - 0.015089959373186279f *n_x_err);
    phi += dt*(w_x - -0.013427109974424565f *n_y_err);
    v_x += dt*(theta*a_z_0 - 0.22131352276793453f *n_x_err);
    v_y += dt*(-1*phi*a_z_0 - 0.2184729596578784f *n_y_err);
    v_z += dt*(a_z - a_z_0 - 94.33333333333394f*r_err);

    a_x_in_W = cosf(psi)*cosf(theta)*a_x + (sinf(phi)*sinf(theta)*cosf(psi) - sinf(psi)*cosf(phi))*a_y + (sinf(phi)*sinf(psi) + sinf(theta)*cosf(phi)*cosf(psi))*a_z;
    a_y_in_W = sinf(psi)*cosf(theta)*a_x + (sinf(phi)*sinf(theta)*sinf(psi) + cosf(psi)*cosf(phi))*a_y + (-1*sinf(phi)*cosf(psi) + sinf(theta)*cosf(phi)*sinf(psi))*a_z;
    v_x_int += dt*a_x_in_W;
    v_y_int += dt*a_y_in_W;
    p_x_int += dt*v_x_int;
    p_y_int += dt*v_y_int;
    
  } else {
    p_x = state->position.x;
    p_y = state->position.y;
    p_z = state->position.z;
    psi = radians(state->attitude.yaw);
    theta = - radians(state->attitude.pitch);
    phi = radians(state->attitude.roll);
    v_x = state->velocity.x*cosf(psi)*cosf(theta) + state->velocity.y*sinf(psi)*cosf(theta) - state->velocity.z*sinf(theta);
    v_y = state->velocity.x*(sinf(phi)*sinf(theta)*cosf(psi) - sinf(psi)*cosf(phi)) + state->velocity.y*(sinf(phi)*sinf(psi)*sinf(theta) + cosf(phi)*cosf(psi)) + state->velocity.z*sinf(phi)*cosf(theta);
    v_z = state->velocity.x*(sinf(phi)*sinf(psi) + sinf(theta)*cosf(phi)*cosf(psi)) + state->velocity.y*(-sinf(phi)*cosf(psi) + sinf(psi)*sinf(theta)*cosf(phi)) + state->velocity.z*cosf(phi)*cosf(theta);

    a_x_in_W = cosf(psi)*cosf(theta)*a_x + (sinf(phi)*sinf(theta)*cosf(psi) - sinf(psi)*cosf(phi))*a_y + (sinf(phi)*sinf(psi) + sinf(theta)*cosf(phi)*cosf(psi))*a_z;
    a_y_in_W = sinf(psi)*cosf(theta)*a_x + (sinf(phi)*sinf(theta)*sinf(psi) + cosf(psi)*cosf(phi))*a_y + (-1*sinf(phi)*cosf(psi) + sinf(theta)*cosf(phi)*sinf(psi))*a_z;
    v_x_int += dt*a_x_in_W;
    v_y_int += dt*a_y_in_W;
    p_x_int += dt*v_x_int;
    p_y_int += dt*v_y_int;
  }

  check_motor_safety();

  if (!safe_to_set_motors || setpoint->mode.z == modeDisable) {
    // If there is no desired position, then all
    // motor power commands should be zero

    m_1 = 0;
    m_2 = 0;
    m_3 = 0;
    m_4 = 0;
  } else {
    // Otherwise, motor power commands should be
    // chosen by the controller

    // FIXME (CONTROLLER GOES HERE)
    tau_x_cmd = 0.00849420f * (p_y - p_y_des) -0.03905284f * phi + 0.00865128f * v_y -0.00269400f * w_x -3.28057629f * tau_x;
    tau_y_cmd = -0.00849420f * (p_x - p_x_des) -0.04345582f * theta -0.00871641f * v_x -0.00696572f * w_y -5.35385208f * tau_y;
    tau_z = -0.02395023f * psi -0.00229215f * w_z;
    f_z = -0.70491893f * (p_z - p_z_des) -0.22108596f * v_z + 0.33550200f;

    // FIXME (METHOD OF POWER DISTRIBUTION GOES HERE)
    m_1 = limitUint16( -4591368.2f * tau_x_cmd -4591368.2f * tau_y_cmd -6811989.1f * tau_z + 151515.2f * f_z );
    m_2 = limitUint16( -4591368.2f * tau_x_cmd + 4591368.2f * tau_y_cmd + 6811989.1f * tau_z + 151515.2f * f_z );
    m_3 = limitUint16( 4591368.2f * tau_x_cmd + 4591368.2f * tau_y_cmd -6811989.1f * tau_z + 151515.2f * f_z );
    m_4 = limitUint16( 4591368.2f * tau_x_cmd -4591368.2f * tau_y_cmd + 6811989.1f * tau_z + 151515.2f * f_z );

  }

  // Apply motor power commands
  control->m1 = m_1;
  control->m2 = m_2;
  control->m3 = m_3;
  control->m4 = m_4;
}

//              1234567890123456789012345678 <-- max total length
//              group   .name
LOG_GROUP_START(ae483log)
LOG_ADD(LOG_FLOAT,       n_x,                    &n_x)
LOG_ADD(LOG_FLOAT,       n_y,                    &n_y)
LOG_ADD(LOG_FLOAT,       r,                      &r)
LOG_ADD(LOG_FLOAT,       a_z,                    &a_z)
LOG_ADD(LOG_UINT16,      num_tof,                &tof_count)
LOG_ADD(LOG_UINT16,      num_flow,               &flow_count)
LOG_ADD(LOG_FLOAT,       p_x,                    &p_x)
LOG_ADD(LOG_FLOAT,       p_y,                    &p_y)
LOG_ADD(LOG_FLOAT,       p_z,                    &p_z)
LOG_ADD(LOG_FLOAT,       psi,                    &psi)
LOG_ADD(LOG_FLOAT,       theta,                  &theta)
LOG_ADD(LOG_FLOAT,       phi,                    &phi)
LOG_ADD(LOG_FLOAT,       v_x,                    &v_x)
LOG_ADD(LOG_FLOAT,       v_y,                    &v_y)
LOG_ADD(LOG_FLOAT,       v_z,                    &v_z)
LOG_ADD(LOG_FLOAT,       w_x,                    &w_x)
LOG_ADD(LOG_FLOAT,       w_y,                    &w_y)
LOG_ADD(LOG_FLOAT,       w_z,                    &w_z)
LOG_ADD(LOG_FLOAT,       p_x_des,                &p_x_des)
LOG_ADD(LOG_FLOAT,       p_y_des,                &p_y_des)
LOG_ADD(LOG_FLOAT,       p_z_des,                &p_z_des)
LOG_ADD(LOG_FLOAT,       tau_x,                  &tau_x)
LOG_ADD(LOG_FLOAT,       tau_y,                  &tau_y)
LOG_ADD(LOG_FLOAT,       tau_z,                  &tau_z)
LOG_ADD(LOG_FLOAT,       f_z,                    &f_z)
LOG_ADD(LOG_UINT16,      m_1,                    &m_1)
LOG_ADD(LOG_UINT16,      m_2,                    &m_2)
LOG_ADD(LOG_UINT16,      m_3,                    &m_3)
LOG_ADD(LOG_UINT16,      m_4,                    &m_4)
LOG_ADD(LOG_FLOAT,       tau_x_cmd,              &tau_x_cmd)
LOG_ADD(LOG_FLOAT,       tau_y_cmd,              &tau_y_cmd)
LOG_ADD(LOG_UINT8,       set_motors,             &safe_to_set_motors)
LOG_ADD(LOG_FLOAT,       a_x,                    &a_x)
LOG_ADD(LOG_FLOAT,       a_y,                    &a_y)
LOG_ADD(LOG_FLOAT,       v_x_int,                &v_x_int)
LOG_ADD(LOG_FLOAT,       v_y_int,                &v_y_int)
LOG_ADD(LOG_FLOAT,       p_x_int,                &p_x_int)
LOG_ADD(LOG_FLOAT,       p_y_int,                &p_y_int)
LOG_ADD(LOG_FLOAT,       a_x_in_W,               &a_x_in_W)
LOG_ADD(LOG_FLOAT,       a_y_in_W,               &a_y_in_W)
LOG_GROUP_STOP(ae483log)

//                1234567890123456789012345678 <-- max total length
//                group   .name
PARAM_GROUP_START(ae483par)
PARAM_ADD(PARAM_UINT8,     use_observer,            &use_observer)
PARAM_ADD(PARAM_UINT8,     reset_observer,          &reset_observer)
PARAM_ADD(PARAM_UINT8,     set_motors,              &safe_to_set_motors)
PARAM_ADD(PARAM_FLOAT,     W_X_LOWER,               &W_X_LOWER)
PARAM_ADD(PARAM_FLOAT,     W_X_UPPER,               &W_X_UPPER)
PARAM_ADD(PARAM_FLOAT,     W_Y_LOWER,               &W_Y_LOWER)
PARAM_ADD(PARAM_FLOAT,     W_Y_UPPER,               &W_Y_UPPER)
PARAM_ADD(PARAM_FLOAT,     W_Z_LOWER,               &W_Z_LOWER)
PARAM_ADD(PARAM_FLOAT,     W_Z_UPPER,               &W_Z_UPPER)
PARAM_ADD(PARAM_FLOAT,     A_Z_LOWER,               &A_Z_LOWER)
PARAM_ADD(PARAM_FLOAT,     A_Z_UPPER,               &A_Z_UPPER)
PARAM_ADD(PARAM_FLOAT,     N_X_LOWER,               &N_X_LOWER)
PARAM_ADD(PARAM_FLOAT,     N_X_UPPER,               &N_X_UPPER)
PARAM_ADD(PARAM_FLOAT,     N_Y_LOWER,               &N_Y_LOWER)
PARAM_ADD(PARAM_FLOAT,     N_Y_UPPER,               &N_Y_UPPER)
PARAM_ADD(PARAM_FLOAT,     R_LOWER,                 &R_LOWER)
PARAM_ADD(PARAM_FLOAT,     R_UPPER,                 &R_UPPER)
PARAM_ADD(PARAM_FLOAT,     P_Z_LOWER,               &P_Z_LOWER)
PARAM_ADD(PARAM_FLOAT,     P_Z_UPPER,               &P_Z_UPPER)
PARAM_ADD(PARAM_FLOAT,     PSI_LOWER,               &PSI_LOWER)
PARAM_ADD(PARAM_FLOAT,     PSI_UPPER,               &PSI_UPPER)
PARAM_ADD(PARAM_FLOAT,     THETA_LOWER,             &THETA_LOWER)
PARAM_ADD(PARAM_FLOAT,     THETA_UPPER,             &THETA_UPPER)
PARAM_ADD(PARAM_FLOAT,     PHI_LOWER,               &PHI_LOWER)
PARAM_ADD(PARAM_FLOAT,     PHI_UPPER,               &PHI_UPPER)
PARAM_ADD(PARAM_FLOAT,     V_X_LOWER,               &V_X_LOWER)
PARAM_ADD(PARAM_FLOAT,     V_X_UPPER,               &V_X_UPPER)
PARAM_ADD(PARAM_FLOAT,     V_Y_LOWER,               &V_Y_LOWER)
PARAM_ADD(PARAM_FLOAT,     V_Y_UPPER,               &V_Y_UPPER)
PARAM_ADD(PARAM_FLOAT,     V_Z_LOWER,               &V_Z_LOWER)
PARAM_ADD(PARAM_FLOAT,     V_Z_UPPER,               &V_Z_UPPER)
PARAM_ADD(PARAM_FLOAT,     P_X_BOUND,               &P_X_BOUND)
PARAM_ADD(PARAM_FLOAT,     P_Y_BOUND,               &P_Y_BOUND)
PARAM_GROUP_STOP(ae483par)
